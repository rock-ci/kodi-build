name: Build
on:
  - push
env:
  BASE_VERSION: "2:21.2+dfsg-1"
jobs:
  build_kodi:
    name: Build Kodi
    strategy:
      fail-fast: false
      matrix:
        architecture:
          - armhf
          - arm64
        include:
          - architecture: armhf
            docker_platform: linux/arm/v7
            volumes: '["/tmp/node20:/__e/node20"]'
          - architecture: arm64
            docker_platform: linux/arm64
            volumes: '[]'
    runs-on: ubuntu-24.04-arm
    container:
      image: ghcr.io/sigmaris/kodibuilder:trixie
      options: --platform ${{ matrix.docker_platform }}
      volumes: ${{ fromJSON(matrix.volumes) }}
    env:
      DEB_ARCH: "${{ matrix.architecture }}"
    steps:
      - name: Work around https://github.com/actions/upload-artifact/issues/616
        if: matrix.architecture == 'armhf'
        run: |
          ls -lar /__e/node20
          curl -Lo /tmp/node.tar.gz https://unofficial-builds.nodejs.org/download/release/v20.18.3/node-v20.18.3-linux-armv6l.tar.gz
          cd /__e/node20
          tar -x --strip-components=1 -f /tmp/node.tar.gz
          ls -lar /__e/node20/bin

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: builder-src

      - name: Prepare source code and configure Kodi
        run: |
          sudo apt-get update
          rm -rf kodi-build
          mkdir kodi-build
          cd kodi-build
          ../builder-src/prepare_kodi.sh

      - name: Upload configuration
        uses: actions/upload-artifact@v4
        with:
          name: kodi-config-${{ matrix.architecture }}
          path: kodi-build/kodi-config_*.tar.bz2

      - name: Compile and package Kodi
        run: |
          cd kodi-build
          ../builder-src/build_kodi.sh

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: kodi-debs-${{ matrix.architecture }}
          path: kodi-build/*.deb

  build_deb_addons:
    name: build_deb_addon
    needs: build_kodi
    strategy:
      fail-fast: false
      matrix:
        name:
          - kodi-screensaver-asteroids
          - kodi-screensaver-biogenesis
          - kodi-screensaver-greynetic
          - kodi-screensaver-pingpong
          - kodi-screensaver-pyro
          - kodi-screensaver-shadertoy
          - kodi-visualization-fishbmc
          - kodi-visualization-pictureit
          - kodi-visualization-shadertoy
          - kodi-visualization-spectrum
          - kodi-visualization-waveform
        architecture:
          - armhf
          - arm64
        include:
          - architecture: armhf
            docker_platform: linux/arm/v7
            volumes: '["/tmp/node20:/__e/node20"]'
          - architecture: arm64
            docker_platform: linux/arm64
            volumes: '[]'
          - name: kodi-screensaver-asteroids
            version: '20.1.0+ds1-2'
          - name: kodi-screensaver-biogenesis
            version: '20.1.0-2'
          - name: kodi-screensaver-greynetic
            version: '20.1.0+ds1-2'
          - name: kodi-screensaver-pingpong
            version: '20.1.0+ds1-2'
          - name: kodi-screensaver-pyro
            version: '20.1.0-2'
          - name: kodi-screensaver-shadertoy
            version: '20.1.0+ds1-2'
          - name: kodi-visualization-fishbmc
            version: '20.2.0+ds1-1'
          - name: kodi-visualization-pictureit
            version: '20.2.0+ds1-1'
          - name: kodi-visualization-shadertoy
            version: '20.3.0+ds1-1'
          - name: kodi-visualization-spectrum
            version: '20.2.0+ds1-1'
          - name: kodi-visualization-waveform
            version: '20.2.1+ds1-1'
    runs-on: ubuntu-24.04-arm
    container:
      image: ghcr.io/sigmaris/kodibuilder:trixie
      options: --platform ${{ matrix.docker_platform }}
      volumes: ${{ fromJSON(matrix.volumes) }}
    env:
      DEB_ARCH: "${{ matrix.architecture }}"
      ADDON_NAME: "${{ matrix.name }}"
      BASE_VERSION: "${{ matrix.version }}"
    steps:
      - name: Work around https://github.com/actions/upload-artifact/issues/616
        if: matrix.architecture == 'armhf'
        run: |
          ls -lar /__e/node20
          curl -Lo /tmp/node.tar.gz https://unofficial-builds.nodejs.org/download/release/v20.18.3/node-v20.18.3-linux-armv6l.tar.gz
          cd /__e/node20
          tar -x --strip-components=1 -f /tmp/node.tar.gz
          ls -lar /__e/node20/bin

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: builder-src

      - name: Create build directory
        run: |
          rm -rf kodi-build
          mkdir -p kodi-build/artifacts
          cd kodi-build

      - name: Download kodi-debs artifact
        uses: actions/download-artifact@v4
        with:
          name: kodi-debs-${{ matrix.architecture }}
          path: artifacts/kodi-debs

      - name: Install dependencies and build addons
        run: |
          cd kodi-build
          sudo apt-get -y -u -V install ../artifacts/kodi-debs/kodi-addons-dev_*_${DEB_ARCH}.deb ../artifacts/kodi-debs/kodi-addons-dev-common_*.deb
          ../builder-src/build_deb_addon.sh

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: deb-addons-${{ matrix.architecture }}
          path: kodi-build/*.deb

  build_git_addons:
    name: build_git_addons
    needs: build_kodi
    strategy:
      fail-fast: false
      matrix:
        architecture:
          - armhf
          - arm64
        addons_regex:
          - 'audiodecoder.* -audiodecoder.(fluidsynth|openmpt|sidplay)'
          - 'screensaver.* -screensaver.(asteroids|biogenesis|greynetic|pingpong|pyro|shadertoy)'
          - 'visualization.* -visualization.(fishbmc|pictureit|shadertoy|spectrum|waveform)'
          - 'vfs.* -vfs.(libarchive|sftp)'
          - '^game\.libretro\.[0-9].*'
          - '^game\.libretro\.a.*'
          - '^game\.libretro\.b.*'
          - '^game\.libretro\.c.*'
          - '^game\.libretro\.[d-e].*'
          - '^game\.libretro\.f.*'
          - '^game\.libretro\.[g-l].*'
          - '^game\.libretro\.ma.*'
          - '^game\.libretro\.m[b-z].*'
          - '^game\.libretro\.n.*'
          - '^game\.libretro\.o.*'
          - '^game\.libretro\.p.*'
          - '^game\.libretro\.[q-r].*'
          - '^game\.libretro\.s.*'
          - '^game\.libretro\.t.*'
          - '^game\.libretro\.u.*'
          - '^game\.libretro\.v.*'
          - '^game\.libretro\.[w-z].*'
        include:
          - architecture: armhf
            docker_platform: linux/arm/v7
            volumes: '["/tmp/node20:/__e/node20"]'
          - architecture: arm64
            docker_platform: linux/arm64
            volumes: '[]'
    runs-on: ubuntu-24.04-arm
    container:
      image: ghcr.io/sigmaris/kodibuilder:trixie
      options: --platform ${{ matrix.docker_platform }}
      volumes: ${{ fromJSON(matrix.volumes) }}
    env:
      DEB_ARCH: "${{ matrix.architecture }}"
      ADDONS_REGEX: "${{ matrix.addons_regex }}"
    steps:
      - name: Work around https://github.com/actions/upload-artifact/issues/616
        if: matrix.architecture == 'armhf'
        run: |
          ls -lar /__e/node20
          curl -Lo /tmp/node.tar.gz https://unofficial-builds.nodejs.org/download/release/v20.18.3/node-v20.18.3-linux-armv6l.tar.gz
          cd /__e/node20
          tar -x --strip-components=1 -f /tmp/node.tar.gz
          ls -lar /__e/node20/bin

      - name: Determine ARCH_TRIPLET
        run: |
          case $DEB_ARCH in
            arm64)
              ARCH_TRIPLET="aarch64-linux-gnu"
              ;;
            armhf)
              ARCH_TRIPLET="arm-linux-gnueabihf"
              ;;
            amd64)
              ARCH_TRIPLET="x86_64-linux-gnu"
              ;;
            *)
              echo "Unknown DEB_ARCH: $DEB_ARCH"
              exit 1
              ;;
          esac
          echo ARCH_TRIPLET="$ARCH_TRIPLET" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: builder-src

      - name: Create build directory
        run: |
          rm -rf kodi-build
          mkdir -p kodi-build/artifacts
          cd kodi-build

      - name: Download kodi-config artifact
        uses: actions/download-artifact@v4
        with:
          name: kodi-config-${{ matrix.architecture }}
          path: artifacts/kodi-config

      - name: Download kodi-debs artifact
        uses: actions/download-artifact@v4
        with:
          name: kodi-debs-${{ matrix.architecture }}
          path: artifacts/kodi-debs

      - name: Install dependencies and build addons
        run: |
          cd kodi-build
          tar xjf ../artifacts/kodi-config/kodi-config_*_${DEB_ARCH}.tar.bz2
          sudo apt-get -y -u -V install ../artifacts/kodi-debs/kodi-addons-dev_*_${DEB_ARCH}.deb ../artifacts/kodi-debs/kodi-addons-dev-common_*_all.deb
          ../builder-src/build_git_addons.sh

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: git-addon-debs-${{ matrix.architecture }}
          path: kodi-build/*.deb
